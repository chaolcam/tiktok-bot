import os
import asyncio
import logging
from datetime import datetime
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.types import DocumentAttributeFilename

# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà    
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà         ‚ñà‚ñà    

# Logging ayarlarƒ±
logging.basicConfig(
    level=logging.INFO,
    format='‚ñ∏ %(asctime)s ‚ñ∏ %(levelname)s ‚ñ∏ %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà    
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà         ‚ñà‚ñà    

# Config
API_ID = int(os.environ.get('API_ID', 0))
API_HASH = os.environ.get('API_HASH', '')
STRING_SESSION = os.environ.get('STRING_SESSION', '')
AUTHORIZED_USER = int(os.environ.get('AUTHORIZED_USER', 0))

# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà    
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà         ‚ñà‚ñà    

# Bot ayarlarƒ±
BOT_SETTINGS = {
    'tiktok': {
        'bots': ['@downloader_tiktok_bot', '@best_tiktok_downloader_bot'],
        'wait': 15,
        'retry_wait': 8,
        'retry_text': "Yanlƒ±≈ü TikTok Linki",
        'album_wait': 3
    },
    'reddit': {
        'bots': ['@reddit_download_bot'],
        'wait': 35
    },
    'twitter': {
        'bots': ['@twitterimage_bot', '@embedybot'],
        'wait': 20
    },
    'youtube': {
        'bots': ['@embedybot'],
        'wait': 20
    }
}

# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà    
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà         ‚ñà‚ñà    

HELP_MESSAGE = """
‚ú® <b>Social Media Downloader Bot</b> ‚ú®

<code>.tiktok</code> <i>url</i> - TikTok video/alb√ºm indir
<code>.reddit</code> <i>url</i> - Reddit i√ßeriƒüi indir
<code>.twitter</code> <i>url</i> - Twitter i√ßeriƒüi indir
<code>.youtube</code> <i>url</i> - YouTube videosu indir
<code>.help</code> - Bu mesajƒ± g√∂ster

‚è≥ <i>TikTok alb√ºmleri 10-15s, Reddit 35s s√ºrebilir</i>
"""

# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà    
#‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà         ‚ñà‚ñà    
# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà         ‚ñà‚ñà    

client = TelegramClient(StringSession(STRING_SESSION), API_ID, API_HASH)

async def send_typing(chat, seconds):
    """Yazƒ±yor efekti"""
    end_time = datetime.now().timestamp() + seconds
    while datetime.now().timestamp() < end_time:
        await client.send_read_acknowledge(chat)
        await asyncio.sleep(2)

async def format_time(seconds):
    """Saniyeyi okunabilir zamana √ßevirir"""
    mins, secs = divmod(seconds, 60)
    return f"{mins:02d}:{secs:02d}"

async def get_all_album_messages(bot_entity, first_msg_id, wait_time):
    """T√ºm alb√ºm mesajlarƒ±nƒ± toplar"""
    messages = []
    logger.info(f"‚ñ∏ Alb√ºm indirme ba≈üladƒ± (max {wait_time}s)")
    
    async with client.action(bot_entity, 'photo') as action:
        end_time = datetime.now().timestamp() + wait_time
        
        while datetime.now().timestamp() < end_time:
            try:
                async for msg in client.iter_messages(bot_entity, min_id=first_msg_id):
                    if msg.id > first_msg_id and (msg.media or 'tiktok' in getattr(msg, 'text', '').lower()):
                        if msg not in messages:
                            messages.append(msg)
                            logger.info(f"‚ñ∏ Alb√ºm par√ßasƒ± eklendi: {len(messages)}. resim")
                await asyncio.sleep(BOT_SETTINGS['tiktok']['album_wait'])
            except Exception as e:
                logger.error(f"‚ñ∏ Alb√ºm hatasƒ±: {str(e)}")
                break
    
    logger.info(f"‚ñ∏ Alb√ºm tamamlandƒ±: {len(messages)} resim")
    return messages

async def handle_tiktok(bot_entity, url):
    """TikTok i√ßin √∂zel i≈ülem"""
    try:
        logger.info(f"‚ñ∏ TikTok i≈ülemi ba≈üladƒ± [@{bot_entity.username}]")
        sent_msg = await client.send_message(bot_entity, url)
        wait_time = BOT_SETTINGS['tiktok']['retry_wait'] if bot_entity.username == BOT_SETTINGS['tiktok']['bots'][1] else BOT_SETTINGS['tiktok']['wait']
        
        first_response = await wait_for_response(bot_entity, sent_msg.id, wait_time)
        
        if not first_response:
            logger.warning("‚ñ∏ TikTok yanƒ±t alƒ±namadƒ±")
            return None
            
        if BOT_SETTINGS['tiktok']['retry_text'] in getattr(first_response, 'text', ''):
            logger.warning("‚ñ∏ Ge√ßersiz TikTok linki")
            return None
        
        if hasattr(first_response, 'grouped_id') or (first_response.text and "album" in first_response.text.lower()):
            logger.info("‚ñ∏ TikTok alb√ºm√º tespit edildi")
            return await get_all_album_messages(bot_entity, sent_msg.id, wait_time)
        
        return [first_response]
    except Exception as e:
        logger.error(f"‚ñ∏ TikTok hatasƒ±: {str(e)}")
        return None

async def wait_for_response(bot_entity, after_msg_id, wait_time):
    """Botun yanƒ±tƒ±nƒ± bekler"""
    logger.info(f"‚ñ∏ Yanƒ±t bekleniyor (max {wait_time}s) [@{bot_entity.username}]")
    last_msg_id = after_msg_id
    end_time = datetime.now().timestamp() + wait_time
    
    while datetime.now().timestamp() < end_time:
        try:
            async for msg in client.iter_messages(bot_entity, min_id=last_msg_id, limit=1):
                if msg.id > last_msg_id:
                    if msg.media or (hasattr(msg, 'text') and ('http' in msg.text or any(x in msg.text.lower() for x in ['tiktok', 'reddit', 'twitter', 'youtube'])):
                        logger.info("‚ñ∏ Yanƒ±t alƒ±ndƒ±")
                        return msg
                    last_msg_id = msg.id
            await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"‚ñ∏ Bekleme hatasƒ±: {str(e)}")
            await asyncio.sleep(1)
    
    logger.warning("‚ñ∏ Yanƒ±t zaman a≈üƒ±mƒ±")
    return None

@client.on(events.NewMessage(outgoing=True, pattern=r'^\.(tiktok|reddit|twitter|youtube)\s+(https?://\S+)$'))
async def handle_command(event):
    if event.sender_id != AUTHORIZED_USER:
        return
    
    try:
        cmd = event.pattern_match.group(1).lower()
        url = event.pattern_match.group(2)
        settings = BOT_SETTINGS.get(cmd, {})
        
        await event.delete()
        logger.info(f"‚ñ∏ Yeni komut: {cmd.upper()} {url}")
        
        # ƒ∞≈ülem ba≈üladƒ± mesajƒ±
        start_time = datetime.now()
        status_msg = await event.respond(
            f"üîÑ <b>{cmd.upper()}</b> i≈üleniyor...\n"
            f"‚è≥ Tahmini s√ºre: <code>{format_time(settings.get('wait', 20))}</code>",
            parse_mode='html'
        )
        
        # Yazƒ±yor efekti
        typing_task = asyncio.create_task(send_typing(event.chat_id, settings.get('wait', 20)))
        
        result = None
        for bot_username in settings.get('bots', []):
            try:
                bot_entity = await client.get_entity(bot_username)
                logger.info(f"‚ñ∏ Hedef bot: @{bot_entity.username}")
                
                if cmd == 'tiktok':
                    result = await handle_tiktok(bot_entity, url)
                elif cmd == 'reddit':
                    result = await handle_reddit_interaction(bot_entity, url)
                else:
                    sent_msg = await client.send_message(bot_entity, url)
                    result = [await wait_for_response(bot_entity, sent_msg.id, settings.get('wait'))]
                
                if result and any(result):
                    break
            except Exception as e:
                logger.error(f"‚ñ∏ Bot hatasƒ± @{bot_username}: {str(e)}")
                continue
        
        # Sonu√ßlarƒ± i≈üle
        typing_task.cancel()
        elapsed = (datetime.now() - start_time).total_seconds()
        
        await status_msg.delete()
        if result and any(result):
            success_msg = await event.respond(
                f"‚úÖ <b>{cmd.upper()}</b> ba≈üarƒ±yla indirildi\n"
                f"üì¶ <code>{len(result)}</code> i√ßerik ‚Ä¢ ‚è±Ô∏è <code>{elapsed:.1f}s</code>",
                parse_mode='html'
            )
            
            for item in result:
                if item:
                    await client.send_message(
                        event.chat_id,
                        file=item.media if item.media else item.text,
                        parse_mode='html'
                    )
                    await asyncio.sleep(1)  # Flood √∂nleme
        else:
            await event.respond(
                f"‚ùå <b>{cmd.upper()}</b> indirilemedi\n"
                f"‚è±Ô∏è <code>{elapsed:.1f}s</code>",
                parse_mode='html'
            )
            
    except Exception as e:
        logger.error(f"‚ñ∏ Komut hatasƒ±: {str(e)}")
        await event.respond(
            f"‚ö†Ô∏è <b>Sistem Hatasƒ±</b>\n<code>{str(e)}</code>",
            parse_mode='html'
        )

@client.on(events.NewMessage(outgoing=True, pattern=r'^\.help$'))
async def handle_help(event):
    if event.sender_id == AUTHORIZED_USER:
        await event.delete()
        await event.respond(HELP_MESSAGE, parse_mode='html')

async def main():
    await client.start()
    me = await client.get_me()
    
    # ASCII Art Banner
    BANNER = """
‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñÄ‚ñà‚ñÄ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñà
‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñë‚ñà‚ñë‚ñë‚ñÄ‚ñÄ‚ñà‚ñë‚ñà‚ñÄ‚ñà
‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñÄ‚ñë‚ñÄ
    """
    
    logger.info(f"\n{BANNER}")
    logger.info(f"‚ñ∏ UserBot ba≈ülatƒ±ldƒ± ‚ñ∏ @{me.username}")
    logger.info(f"‚ñ∏ Versiyon ‚ñ∏ 2.1.0")
    
    # Ba≈ülangƒ±√ß bildirimi
    await client.send_message(
        'me',
        f"üöÄ <b>UserBot Aktif</b>\n"
        f"üë§ <code>@{me.username}</code>\n"
        f"üïí <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>",
        parse_mode='html'
    )
    
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
